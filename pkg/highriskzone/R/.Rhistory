library(highriskzone)
?owin
?bounding.box.xy
?as.owin
?bounding.box.xy
Optional. Name of unit of length. Either a single character string, or a vector of two character strings giving the singular and plural forms, respectively.
X <- rpoispp(30)
plot(X, main="bounding.box.xy(X)")
plot(bounding.box.xy(X), add=TRUE)
?spatstat
help(spatstat)
x <- rpoispp(20)
bounding.box.xy(x)
?bounding.box.xy
?owin
bounding.box.xy(x, unitname="metres")
class(w)
w <- bounding.box.xy(x)
class(w)
w$unit
w$unit <- "metres"
w
w$unit <- c("meter", "metres")
w
w$unit <- c("meter", "metres")
w
unit(w)
w$unit
x <- rpoispp(20)
w <- bounding.box.xy(x)
class(w)
?owin
w$unit
w$unit <- c("meter", "metres")
w$unit
str(w)
w <- bounding.box.xy(x)
str(w)
str(w$unit)
w$unit <- c("meter", "metres")
str(w$unit)
w <- bounding.box.xy(x)
str(w$unit)
w$unit$singular <- "meter"
str(w$unit)
w$unit$plural <- "meters"
str(w$unit)
w$unit$singular <- NULL
x <- rpoispp(20)
w <- bounding.box.xy(x)
class(w)
str(w$unit)
w$unit$singular <- NULL
str(w$unit)
owin
?as.units
as.units("meter", "meters")
spatstat:::as.units("meter", "meters")
??as.units
spatstat:::as.units
spatstat:::as.units("meter")
spatstat:::as.units(c("meter", "meters"))
?as.units
spatstat:::as.units(NULL)
w$unitname <- as.units(c("meter"))
w$unit <- as.units(c("meter"))
str(w$unit)
w$unit <- as.units(c("meter", "meters"))
str(w$unit)
w$unit <- as.units(NULL)
str(w$unit)
read_pppdata <- function(xppp, yppp, xwin=NULL, ywin=NULL, unitname=NULL) {
#check if input arguments have correct values
stopifnot(is.vector(xppp), is.vector(yppp))
if ( !is.vector(xwin) & !is.null(xwin) ) stop("xwin must be a vector")
if ( !is.vector(ywin) & !is.null(ywin) ) stop("ywin must be a vector")
if ( is.null(xwin) | is.null(ywin) ) warning("since the coordinates for the window (xwin, ywin) are not given,
it has to be calculated.")
if (is.null(xwin) | is.null(ywin)){
w <- bounding.box.xy(xppp, yppp)
w$xrange <- w$xrange + c(-1,1)*0.1*(w$xrange[2] - w$xrange[1])
w$yrange <- w$yrange + c(-1,1)*0.1*(w$yrange[2] - w$yrange[1])
w$unit <- as.units(unitname)
} else{
win <- bounding.box.xy(xwin, ywin)
w <- owin(win$xrange, win$yrange, poly=list(x=xwin, y=ywin), unitname=unitname)
}
result <- ppp(xppp, yppp, window=w)
return(result)
}
read_pppdata(x)
x
str(x)
read_pppdata(x$x, x$y)
read_pppdata(x$x, x$y, unitname=c("meter", "meters"))
?owin
a <- owin(c(10,20), c(10,30), unitname=c("foot","feet"))
a
ppp(a)
ppp(x, win=a)
?ppp
ppp(x$x, x$y, win=a)
ppp(x$x, x$y, window=a)
a <- owin(c(0,1), c(0,3), unitname=c("foot","feet"))
a
ppp(x$x, x$y, window=a)
a <- owin(c(0,1), c(0,3))
a$unit <- spatstat:::as.units("gruen")
ppp(x$x, x$y, window=a)
spatstat:::as.units("gruen")
owin
spatstat:::as.units
x <- rpoispp(20)
w <- bounding.box.xy(x)
class(w)
str(w$unit)
w$unit <- spatstat:::as.units("gruen")
str(w$unit)
x <- rpoispp(20)
w <- bounding.box.xy(x)
w$xrange <- w$xrange + c(-1,1)*0.1*(w$xrange[2] - w$xrange[1])
w$yrange <- w$yrange + c(-1,1)*0.1*(w$yrange[2] - w$yrange[1])
w$unit <- as.units(unitname)
unitname <- "super"
w$unit <- as.units(unitname)
class(w)
str(w$unit)
read_pppdata <- function(xppp, yppp, xwin=NULL, ywin=NULL, unitname=NULL) {
#check if input arguments have correct values
stopifnot(is.vector(xppp), is.vector(yppp))
if ( !is.vector(xwin) & !is.null(xwin) ) stop("xwin must be a vector")
if ( !is.vector(ywin) & !is.null(ywin) ) stop("ywin must be a vector")
if ( is.null(xwin) | is.null(ywin) ) warning("since the coordinates for the window (xwin, ywin) are not given,
it has to be calculated.")
if (is.null(xwin) | is.null(ywin)){
w <- bounding.box.xy(xppp, yppp)
w$xrange <- w$xrange + c(-1,1)*0.1*(w$xrange[2] - w$xrange[1])
w$yrange <- w$yrange + c(-1,1)*0.1*(w$yrange[2] - w$yrange[1])
w$unit <- as.units(unitname)
} else{
win <- bounding.box.xy(xwin, ywin)
w <- owin(win$xrange, win$yrange, poly=list(x=xwin, y=ywin), unitname=unitname)
}
result <- ppp(xppp, yppp, window=w)
return(result)
}
read_pppdata(x$x, x$y, unitname=c("meter", "meters"))
w <- bounding.box.xy(x)
w$x
read_pppdata(x$x, x$y, xwin=w$x, ywin=w$y, unitname=c("meter", "meters"))
x <- rpoispp(20)
w <- bounding.box.xy(x)
read_pppdata(x$x, x$y, xwin=w$x, ywin=w$y, unitname=c("meter", "meters"))
read_pppdata(x$x, x$y, unitname=c("meter", "meters"))
read_pppdata(x$x, x$y, xwin=w$x, ywin=w$y)
w$xrange <- w$xrange + c(-1,1)*0.1*(w$xrange[2] - w$xrange[1])
w$yrange <- w$yrange + c(-1,1)*0.1*(w$yrange[2] - w$yrange[1])
read_pppdata(x$x, x$y, xwin=w$x, ywin=w$y)
read_pppdata(x$x, x$y, xwin=w$x, ywin=w$y, unitname=c("meter", "meters"))
read_pppdata(x$x, x$y, unitname=c("meter", "meters"))
read_pppdata <- function(xppp, yppp, xwin=NULL, ywin=NULL, unitname=NULL) {
#check if input arguments have correct values
stopifnot(is.vector(xppp), is.vector(yppp))
if ( !is.vector(xwin) & !is.null(xwin) ) stop("xwin must be a vector")
if ( !is.vector(ywin) & !is.null(ywin) ) stop("ywin must be a vector")
if ( is.null(xwin) | is.null(ywin) ) warning("since the coordinates for the window (xwin, ywin) are not given,
it has to be calculated.")
if (is.null(xwin) | is.null(ywin)){
w <- bounding.box.xy(xppp, yppp)
w$xrange <- w$xrange + c(-1,1)*0.1*(w$xrange[2] - w$xrange[1])
w$yrange <- w$yrange + c(-1,1)*0.1*(w$yrange[2] - w$yrange[1])
w$unit <- spatstat:::as.units(unitname)
} else{
win <- bounding.box.xy(xwin, ywin)
w <- owin(win$xrange, win$yrange, poly=list(x=xwin, y=ywin), unitname=unitname)
}
result <- ppp(xppp, yppp, window=w)
return(result)
}
read_pppdata(x$x, x$y, unitname=c("meter", "meters"))
x <- rpoispp(20)
w <- bounding.box.xy(x)
w$xrange <- w$xrange + c(-1,1)*0.1*(w$xrange[2] - w$xrange[1])
w$yrange <- w$yrange + c(-1,1)*0.1*(w$yrange[2] - w$yrange[1])
unitname <- "super"
w$unit <- as.units(unitname)
class(w)
str(w$unit)
read_pppdata(x$x, x$y, unitname=c("meter", "meters"))
read_pppdata(x$x, x$y, xwin=w$x, ywin=w$y)
read_pppdata(x$x, x$y, xwin=w$x, ywin=w$y, unitname=c("meter", "meters"))
x
x$range
str(x)
plot(x)
?ppp
ppp(x, unitname="a")
ppp(x$x, x$y, unitname="a")
read_pppdata <- function(xppp, yppp, xwin=NULL, ywin=NULL, unitname=NULL) {
#check if input arguments have correct values
stopifnot(is.vector(xppp), is.vector(yppp))
if ( !is.vector(xwin) & !is.null(xwin) ) stop("xwin must be a vector")
if ( !is.vector(ywin) & !is.null(ywin) ) stop("ywin must be a vector")
if ( is.null(xwin) | is.null(ywin) ) warning("since the coordinates for the window (xwin, ywin) are not given,
it has to be calculated.")
if (is.null(xwin) | is.null(ywin)){
w <- bounding.box.xy(xppp, yppp)
w$xrange <- w$xrange + c(-1,1)*0.1*(w$xrange[2] - w$xrange[1])
w$yrange <- w$yrange + c(-1,1)*0.1*(w$yrange[2] - w$yrange[1])
} else{
win <- bounding.box.xy(xwin, ywin)
w <- owin(win$xrange, win$yrange, poly=list(x=xwin, y=ywin))
}
result <- ppp(xppp, yppp, window=w, unitname=unitname)
return(result)
}
read_pppdata(x$x, x$y, unitname=c("meter", "meters"))
read_pppdata(x$x, x$y, xwin=w$x, ywin=w$y)
read_pppdata(x$x, x$y, xwin=w$x, ywin=w$y, unitname=c("meter", "meters"))
read_pppdata(x$x, x$y, unitname=c("meter", "meters"))
read_pppdata <- function(xppp, yppp, xwin=NULL, ywin=NULL, unitname=NULL) {
#check if input arguments have correct values
stopifnot(is.vector(xppp), is.vector(yppp))
if ( !is.vector(xwin) & !is.null(xwin) ) stop("xwin must be a vector")
if ( !is.vector(ywin) & !is.null(ywin) ) stop("ywin must be a vector")
if ( is.null(xwin) | is.null(ywin) ) warning("since the coordinates for the window (xwin, ywin) are not given,
it has to be calculated.")
if (is.null(xwin) | is.null(ywin)){
w <- bounding.box.xy(xppp, yppp)
w$xrange <- w$xrange + c(-1,1)*0.1*(w$xrange[2] - w$xrange[1])
w$yrange <- w$yrange + c(-1,1)*0.1*(w$yrange[2] - w$yrange[1])
} else{
win <- bounding.box.xy(xwin, ywin)
w <- owin(win$xrange, win$yrange, poly=list(x=xwin, y=ywin))
}
result <- ppp(xppp, yppp, window=w, unitname=unitname)
return(result)
}
read_pppdata(x$x, x$y, unitname="a")
ppp(x$x, x$y, unitname="a")
read_pppdata(x$x, x$y, xwin=w$x, ywin=w$y, unitname=c("meter", "meters"))
x$x
plot(w)
plot(x, add=TRUE)
str(w)
w$x
w$y
x <- rpoispp(20)
ppp(x$x, x$y, unitname="a")
plot(ppp(x$x, x$y, unitname="a"))
tst <- ppp(x$x, x$y, unitname="a")
tst
str(tst)
?ppp
tst <- ppp(x$x, x$y, unitname="a")
str(tst)
read_pppdata(x$x, x$y, unitname="a")
tst
#- frÃ¼her: readDataPPP
read_pppdata <- function(xppp, yppp, xwin=NULL, ywin=NULL, unitname=NULL) {
#check if input arguments have correct values
stopifnot(is.vector(xppp), is.vector(yppp))
if ( !is.vector(xwin) & !is.null(xwin) ) stop("xwin must be a vector")
if ( !is.vector(ywin) & !is.null(ywin) ) stop("ywin must be a vector")
if ( is.null(xwin) | is.null(ywin) ) warning("since the coordinates for the window (xwin, ywin) are not given,
it has to be calculated.")
if (is.null(xwin) | is.null(ywin)){
w <- bounding.box.xy(xppp, yppp)
w$xrange <- w$xrange + c(-1,1)*0.1*(w$xrange[2] - w$xrange[1])
w$yrange <- w$yrange + c(-1,1)*0.1*(w$yrange[2] - w$yrange[1])
} else{
win <- bounding.box.xy(xwin, ywin)
w <- owin(win$xrange, win$yrange, poly=list(x=xwin, y=ywin))
}
browser()
result <- ppp(xppp, yppp, window=w, unitname=unitname)
return(result)
}
tst <- ppp(x$x, x$y, unitname="a")
read_pppdata(x$x, x$y, unitname="a")
ls()
unitname
result <- ppp(xppp, yppp, window=w, unitname=unitname)
result
result <- ppp(xppp, yppp, window=w, unitname="a")
result
result <- ppp(xppp, yppp, unitname="a")
result
result <- ppp(xppp, yppp, unitname="a", window = w)
result
w
owin
?ppp
ppp
bounding.box.xy
?owin
w
str(w)
structure(w)
?structure
str(w)
Q
owin
read_pppdata <- function(xppp, yppp, xwin=NULL, ywin=NULL, unitname=NULL) {
#check if input arguments have correct values
stopifnot(is.vector(xppp), is.vector(yppp))
if ( !is.vector(xwin) & !is.null(xwin) ) stop("xwin must be a vector")
if ( !is.vector(ywin) & !is.null(ywin) ) stop("ywin must be a vector")
if ( is.null(xwin) | is.null(ywin) ) warning("since the coordinates for the window (xwin, ywin) are not given,
it has to be calculated.")
if (is.null(xwin) | is.null(ywin)){
w <- bounding.box.xy(xppp, yppp)
w$xrange <- w$xrange + c(-1,1)*0.1*(w$xrange[2] - w$xrange[1])
w$yrange <- w$yrange + c(-1,1)*0.1*(w$yrange[2] - w$yrange[1])
unitname <- spatstat:::as.units(unitname)
w$unit <- unitname
} else{
win <- bounding.box.xy(xwin, ywin)
w <- owin(win$xrange, win$yrange, poly=list(x=xwin, y=ywin), unitname=unitname)
}
browser()
result <- ppp(xppp, yppp, window=w)
return(result)
}
read_pppdata(x$x, x$y, unitname="a")
read_pppdata(x$x, x$y, xwin=w$x, ywin=w$y, unitname=c("meter", "meters"))
read_pppdata <- function(xppp, yppp, xwin=NULL, ywin=NULL, unitname=NULL) {
#check if input arguments have correct values
stopifnot(is.vector(xppp), is.vector(yppp))
if ( !is.vector(xwin) & !is.null(xwin) ) stop("xwin must be a vector")
if ( !is.vector(ywin) & !is.null(ywin) ) stop("ywin must be a vector")
if ( is.null(xwin) | is.null(ywin) ) warning("since the coordinates for the window (xwin, ywin) are not given,
it has to be calculated.")
if (is.null(xwin) | is.null(ywin)){
w <- bounding.box.xy(xppp, yppp)
w$xrange <- w$xrange + c(-1,1)*0.1*(w$xrange[2] - w$xrange[1])
w$yrange <- w$yrange + c(-1,1)*0.1*(w$yrange[2] - w$yrange[1])
browser()
unitname <- spatstat:::as.units(unitname)
w$unit <- unitname
} else{
win <- bounding.box.xy(xwin, ywin)
w <- owin(win$xrange, win$yrange, poly=list(x=xwin, y=ywin), unitname=unitname)
}
result <- ppp(xppp, yppp, window=w)
return(result)
}
read_pppdata(x$x, x$y, unitname="a")
library(spatstat)
?rNeymanScott
?ppp
?owin
library(highriskzone)
?det_hrz
install.packages(mgcv)
install.packages("mgcv")
library(highrsikzone)
library(highriskzone)
library(mgcv)
rm()
